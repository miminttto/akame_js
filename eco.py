import telebot
import sqlite3
import json
import random
import time
from datetime import datetime, timedelta

bot = telebot.TeleBot('8351445452:AAHH7svpZKHd50r8tp8m9XRSnAC60HyMAPY')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('economy.db')
    c = conn.cursor()

    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    c.execute('''CREATE TABLE IF NOT EXISTS users
                 (user_id INTEGER PRIMARY KEY, 
                  username TEXT,
                  balance INTEGER DEFAULT 100,
                  bank INTEGER DEFAULT 0,
                  daily_claimed INTEGER DEFAULT 0,
                  work_cooldown INTEGER DEFAULT 0,
                  inventory TEXT DEFAULT '{}')''')

    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
def get_user(user_id):
    conn = sqlite3.connect('economy.db')
    c = conn.cursor()
    c.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    user = c.fetchone()
    conn.close()

    if user:
        return {
            'user_id': user[0],
            'username': user[1],
            'balance': user[2],
            'bank': user[3],
            'daily_claimed': user[4],
            'work_cooldown': user[5],
            'inventory': json.loads(user[6])
        }
    return None

def create_user(user_id, username):
    conn = sqlite3.connect('economy.db')
    c = conn.cursor()
    c.execute("INSERT INTO users (user_id, username) VALUES (?, ?)", 
              (user_id, username))
    conn.commit()
    conn.close()

def update_user(user_id, **kwargs):
    conn = sqlite3.connect('economy.db')
    c = conn.cursor()

    if 'inventory' in kwargs:
        kwargs['inventory'] = json.dumps(kwargs['inventory'])

    set_clause = ", ".join([f"{key} = ?" for key in kwargs.keys()])
    values = list(kwargs.values())
    values.append(user_id)

    c.execute(f"UPDATE users SET {set_clause} WHERE user_id = ?", values)
    conn.commit()
    conn.close()

# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
@bot.message_handler(commands=['start'])
def start_command(message):
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name

    user = get_user(user_id)
    if not user:
        create_user(user_id, username)
        user = get_user(user_id)

    bot.reply_to(message, 
                 f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫—É—é —Å–∏—Å—Ç–µ–º—É, {username}!\n"
                 f"üíµ –í–∞—à –±–∞–ª–∞–Ω—Å: {user['balance']} –º–æ–Ω–µ—Ç\n"
                 f"üè¶ –í –±–∞–Ω–∫–µ: {user['bank']} –º–æ–Ω–µ—Ç\n\n"
                 f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                 f"/balance - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å\n"
                 f"/work - —Ä–∞–±–æ—Ç–∞—Ç—å\n"
                 f"/daily - –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞\n"
                 f"/deposit - –ø–æ–ª–æ–∂–∏—Ç—å –≤ –±–∞–Ω–∫\n"
                 f"/withdraw - —Å–Ω—è—Ç—å —Å –±–∞–Ω–∫–∞\n"
                 f"/shop - –º–∞–≥–∞–∑–∏–Ω\n"
                 f"/inventory - –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å")

# –ë–∞–ª–∞–Ω—Å
@bot.message_handler(commands=['balance'])
def balance_command(message):
    user_id = message.from_user.id
    user = get_user(user_id)

    if not user:
        bot.reply_to(message, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
        return

    bot.reply_to(message,
                 f"üíº –ë–∞–ª–∞–Ω—Å {user['username']}:\n"
                 f"üíµ –ù–∞–ª–∏—á–Ω—ã–µ: {user['balance']} –º–æ–Ω–µ—Ç\n"
                 f"üè¶ –í –±–∞–Ω–∫–µ: {user['bank']} –º–æ–Ω–µ—Ç\n"
                 f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞: {user['balance'] + user['bank']} –º–æ–Ω–µ—Ç")

# –†–∞–±–æ—Ç–∞
@bot.message_handler(commands=['work'])
def work_command(message):
    user_id = message.from_user.id
    user = get_user(user_id)

    if not user:
        bot.reply_to(message, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
        return

    current_time = int(time.time())
    if current_time < user['work_cooldown']:
        wait_time = user['work_cooldown'] - current_time
        bot.reply_to(message, f"‚è∞ –í—ã —É—Å—Ç–∞–ª–∏! –û—Ç–¥–æ—Ö–Ω–∏—Ç–µ –µ—â–µ {wait_time} —Å–µ–∫—É–Ω–¥")
        return

    # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞
    salary = random.randint(50, 200)
    new_balance = user['balance'] + salary
    cooldown = current_time + 300  # 5 –º–∏–Ω—É—Ç –∫–æoldown

    update_user(user_id, balance=new_balance, work_cooldown=cooldown)

    jobs = ["–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–º", "–¥–∏–∑–∞–π–Ω–µ—Ä–æ–º", "—Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–º", "–≤–æ–¥–∏—Ç–µ–ª–µ–º", "–ø–æ–≤–∞—Ä–æ–º"]
    job = random.choice(jobs)

    bot.reply_to(message, 
                 f"üíº –í—ã –ø–æ—Ä–∞–±–æ—Ç–∞–ª–∏ {job} –∏ –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {salary} –º–æ–Ω–µ—Ç!\n"
                 f"üíµ –¢–µ–ø–µ—Ä—å —É –≤–∞—Å: {new_balance} –º–æ–Ω–µ—Ç")

# –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞
@bot.message_handler(commands=['daily'])
def daily_command(message):
    user_id = message.from_user.id
    user = get_user(user_id)

    if not user:
        bot.reply_to(message, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
        return

    current_time = int(time.time())
    last_claimed = user['daily_claimed']

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ 24 —á–∞—Å–∞
    if current_time - last_claimed < 86400 and last_claimed != 0:
        next_claim = last_claimed + 86400
        wait_time = next_claim - current_time
        hours = wait_time // 3600
        minutes = (wait_time % 3600) // 60

        bot.reply_to(message, 
                    f"‚è∞ –í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –Ω–∞–≥—Ä–∞–¥—É —Å–µ–≥–æ–¥–Ω—è!\n"
                    f"–°–ª–µ–¥—É—é—â–∞—è –Ω–∞–≥—Ä–∞–¥–∞ —á–µ—Ä–µ–∑ {hours}—á {minutes}–º")
        return

    daily_reward = random.randint(100, 500)
    new_balance = user['balance'] + daily_reward

    update_user(user_id, balance=new_balance, daily_claimed=current_time)

    bot.reply_to(message,
                f"üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞!\n"
                f"üíµ –í—ã –ø–æ–ª—É—á–∏–ª–∏: {daily_reward} –º–æ–Ω–µ—Ç\n"
                f"üí∞ –¢–µ–ø–µ—Ä—å —É –≤–∞—Å: {new_balance} –º–æ–Ω–µ—Ç")

# –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
@bot.message_handler(commands=['deposit'])
def deposit_command(message):
    try:
        args = message.text.split()
        if len(args) < 2:
            bot.reply_to(message, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /deposit <—Å—É–º–º–∞> –∏–ª–∏ /deposit all")
            return

        amount_str = args[1]
        if amount_str.lower() == 'all':
            amount = 'all'
        else:
            amount = int(amount_str)
    except (IndexError, ValueError):
        bot.reply_to(message, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /deposit <—Å—É–º–º–∞> –∏–ª–∏ /deposit all")
        return

    user_id = message.from_user.id
    user = get_user(user_id)

    if not user:
        bot.reply_to(message, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
        return

    if amount == 'all':
        amount = user['balance']
    else:
        amount = int(amount)

    if amount <= 0:
        bot.reply_to(message, "‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
        return

    if amount > user['balance']:
        bot.reply_to(message, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
        return

    new_balance = user['balance'] - amount
    new_bank = user['bank'] + amount

    update_user(user_id, balance=new_balance, bank=new_bank)

    bot.reply_to(message,
                f"üè¶ –í—ã –ø–æ–ª–æ–∂–∏–ª–∏ –≤ –±–∞–Ω–∫ {amount} –º–æ–Ω–µ—Ç\n"
                f"üíµ –ù–∞–ª–∏—á–Ω—ã–µ: {new_balance} –º–æ–Ω–µ—Ç\n"
                f"üè¶ –í –±–∞–Ω–∫–µ: {new_bank} –º–æ–Ω–µ—Ç")

@bot.message_handler(commands=['withdraw'])
def withdraw_command(message):
    try:
        args = message.text.split()
        if len(args) < 2:
            bot.reply_to(message, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /withdraw <—Å—É–º–º–∞> –∏–ª–∏ /withdraw all")
            return

        amount_str = args[1]
        if amount_str.lower() == 'all':
            amount = 'all'
        else:
            amount = int(amount_str)
    except (IndexError, ValueError):
        bot.reply_to(message, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /withdraw <—Å—É–º–º–∞> –∏–ª–∏ /withdraw all")
        return

    user_id = message.from_user.id
    user = get_user(user_id)

    if not user:
        bot.reply_to(message, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
        return

    if amount == 'all':
        amount = user['bank']
    else:
        amount = int(amount)

    if amount <= 0:
        bot.reply_to(message, "‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
        return

    if amount > user['bank']:
        bot.reply_to(message, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –≤ –±–∞–Ω–∫–µ")
        return

    new_balance = user['balance'] + amount
    new_bank = user['bank'] - amount

    update_user(user_id, balance=new_balance, bank=new_bank)

    bot.reply_to(message,
                f"üè¶ –í—ã —Å–Ω—è–ª–∏ —Å –±–∞–Ω–∫–∞ {amount} –º–æ–Ω–µ—Ç\n"
                f"üíµ –ù–∞–ª–∏—á–Ω—ã–µ: {new_balance} –º–æ–Ω–µ—Ç\n"
                f"üè¶ –í –±–∞–Ω–∫–µ: {new_bank} –º–æ–Ω–µ—Ç")

# –ú–∞–≥–∞–∑–∏–Ω
shop_items = {
    "phone": {"name": "üì± –°–º–∞—Ä—Ç—Ñ–æ–Ω", "price": 500, "description": "–ö—Ä—É—Ç–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω"},
    "laptop": {"name": "üíª –ù–æ—É—Ç–±—É–∫", "price": 1500, "description": "–ú–æ—â–Ω—ã–π –Ω–æ—É—Ç–±—É–∫"},
    "car": {"name": "üöó –ú–∞—à–∏–Ω–∞", "price": 5000, "description": "–ë—ã—Å—Ç—Ä–∞—è –º–∞—à–∏–Ω–∞"},
    "house": {"name": "üè† –î–æ–º", "price": 20000, "description": "–ë–æ–ª—å—à–æ–π –¥–æ–º"}
}

@bot.message_handler(commands=['shop'])
def shop_command(message):
    shop_text = "üõçÔ∏è **–ú–∞–≥–∞–∑–∏–Ω**\n\n"

    for item_id, item in shop_items.items():
        shop_text += f"{item['name']}\n"
        shop_text += f"üíµ –¶–µ–Ω–∞: {item['price']} –º–æ–Ω–µ—Ç\n"
        shop_text += f"üìù {item['description']}\n"
        shop_text += f"üõí –ö—É–ø–∏—Ç—å: /buy {item_id}\n\n"

    bot.reply_to(message, shop_text)

@bot.message_handler(commands=['buy'])
def buy_command(message):
    try:
        item_id = message.text.split()[1]
    except IndexError:
        bot.reply_to(message, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /buy <–ø—Ä–µ–¥–º–µ—Ç>")
        return

    if item_id not in shop_items:
        bot.reply_to(message, "‚ùå –¢–∞–∫–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ—Ç –≤ –º–∞–≥–∞–∑–∏–Ω–µ")
        return

    user_id = message.from_user.id
    user = get_user(user_id)

    if not user:
        bot.reply_to(message, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
        return

    item = shop_items[item_id]

    if user['balance'] < item['price']:
        bot.reply_to(message, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
    inventory = user['inventory']
    if item_id in inventory:
        inventory[item_id] += 1
    else:
        inventory[item_id] = 1

    new_balance = user['balance'] - item['price']

    update_user(user_id, balance=new_balance, inventory=inventory)

    bot.reply_to(message,
                f"üéâ –í—ã –∫—É–ø–∏–ª–∏ {item['name']} –∑–∞ {item['price']} –º–æ–Ω–µ—Ç!\n"
                f"üíµ –û—Å—Ç–∞–ª–æ—Å—å: {new_balance} –º–æ–Ω–µ—Ç")

# –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å
@bot.message_handler(commands=['inventory'])
def inventory_command(message):
    user_id = message.from_user.id
    user = get_user(user_id)

    if not user:
        bot.reply_to(message, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
        return

    inventory = user['inventory']

    if not inventory:
        bot.reply_to(message, "üì¶ –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç")
        return

    inv_text = "üéí **–í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:**\n\n"

    for item_id, count in inventory.items():
        if item_id in shop_items:
            item_name = shop_items[item_id]['name']
            inv_text += f"{item_name} - {count} —à—Ç.\n"

    bot.reply_to(message, inv_text)

# –ü–µ—Ä–µ–¥–∞—á–∞ –¥–µ–Ω–µ–≥
@bot.message_handler(commands=['pay'])
def pay_command(message):
    try:
        args = message.text.split()
        target_username = args[1].replace('@', '')
        amount = int(args[2])
    except (IndexError, ValueError):
        bot.reply_to(message, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /pay @username <—Å—É–º–º–∞>")
        return

    user_id = message.from_user.id
    user = get_user(user_id)

    if not user:
        bot.reply_to(message, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
        return

    if amount <= 0:
        bot.reply_to(message, "‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
        return

    if amount > user['balance']:
        bot.reply_to(message, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
        return

    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username
    conn = sqlite3.connect('economy.db')
    c = conn.cursor()
    c.execute("SELECT * FROM users WHERE username = ?", (target_username,))
    target_user = c.fetchone()
    conn.close()

    if not target_user:
        bot.reply_to(message, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    if target_user[0] == user_id:
        bot.reply_to(message, "‚ùå –ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Å–µ–±–µ")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã
    new_balance_user = user['balance'] - amount
    new_balance_target = target_user[2] + amount

    update_user(user_id, balance=new_balance_user)
    update_user(target_user[0], balance=new_balance_target)

    bot.reply_to(message,
                f"üí∏ –í—ã –ø–µ—Ä–µ–≤–µ–ª–∏ {amount} –º–æ–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{target_username}\n"
                f"üíµ –í–∞—à –±–∞–ª–∞–Ω—Å: {new_balance_user} –º–æ–Ω–µ—Ç")


print("INFO: –≠–∫–æ–Ω–æ–º–∏–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞!")
# –í–ê–ñ–ù–û: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞
init_db()
bot.infinity_polling()